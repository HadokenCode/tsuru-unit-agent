// Copyright 2013 tsuru authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package agent

import (
	"bytes"
	"fmt"
	"github.com/globocom/tsuru/app/bind"
	"github.com/globocom/tsuru/exec"
	"github.com/globocom/tsuru/fs"
	"sync"
	"time"
)

var (
	execut  exec.Executor
	emutex  sync.Mutex
	fsystem fs.Fs
)

func filesystem() fs.Fs {
	if fsystem == nil {
		fsystem = fs.OsFs{}
	}
	return fsystem
}

func executor() exec.Executor {
	emutex.Lock()
	defer emutex.Unlock()
	if execut == nil {
		execut = exec.OsExecutor{}
	}
	return execut
}

// SaveApprcFile generates the apprc file with the environs data.
func SaveApprcFile(environs map[string]bind.EnvVar) error {
	file, err := filesystem().Create("/home/application/apprc")
	if err != nil {
		return err
	}
	defer file.Close()
	var buffer bytes.Buffer
	buffer.WriteString(fmt.Sprintf("# generated by tsuru at %s\n", time.Now().Format(time.RFC822Z)))
	for k, v := range environs {
		buffer.WriteString(fmt.Sprintf(`export %s="%s"`+"\n", k, v.Value))
	}
	file.WriteString(buffer.String())
	return nil
}

// ExecuteStartScript executes the start script.
func ExecuteStartScript() error {
	return executor().Execute("/var/lib/tsuru/start", nil, nil, nil, nil)
}
