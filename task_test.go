// Copyright 2014 tsuru authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"github.com/globocom/tsuru/app/bind"
	"github.com/globocom/tsuru/exec"
	etesting "github.com/globocom/tsuru/exec/testing"
	ftesting "github.com/globocom/tsuru/fs/testing"
	"io/ioutil"
	"launchpad.net/gocheck"
	"strings"
)

func setExecutor(e exec.Executor) {
	emutex.Lock()
	execut = e
	emutex.Unlock()
}

func (s *S) TestSaveApprcFile(c *gocheck.C) {
	rfs := ftesting.RecordingFs{}
	old := fsystem
	fsystem = &rfs
	defer func() {
		fsystem = old
	}()
	envs := map[string]bind.EnvVar{
		"DATABASE_HOST":     {Name: "DATABASE_HOST", Value: "localhost", Public: true},
		"DATABASE_USER":     {Name: "DATABASE_USER", Value: "root", Public: true},
		"DATABASE_PASSWORD": {Name: "DATABASE_PASSWORD", Value: "secret", Public: false},
	}
	err := SaveApprcFile(envs)
	c.Assert(err, gocheck.IsNil)
	f, err := rfs.Open("/home/application/apprc")
	c.Assert(err, gocheck.IsNil)
	defer f.Close()
	data, err := ioutil.ReadAll(f)
	c.Assert(err, gocheck.IsNil)
	expected := `^# generated by tsuru at .*export DATABASE_HOST="localhost"export DATABASE_USER="root"export DATABASE_PASSWORD="secret"$`
	result := strings.Replace(string(data), "\n", "", -1)
	c.Assert(result, gocheck.Matches, expected)
}

func (s *S) TestExecuteStartScript(c *gocheck.C) {
	fexec := &etesting.FakeExecutor{}
	setExecutor(fexec)
	defer setExecutor(nil)
	err := ExecuteStartScript()
	c.Assert(err, gocheck.IsNil)
	c.Assert(fexec.ExecutedCmd("/var/lib/tsuru/start", nil), gocheck.Equals, true)
}
